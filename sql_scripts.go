// Code generated by go-bindata. DO NOT EDIT.
// sources:
// ../../schema/database/000001_create_initial_tables.down.sql (142B)
// ../../schema/database/000001_create_initial_tables.up.sql (1.176kB)

package main

import (
	"bytes"
	"compress/gzip"
	"crypto/sha256"
	"fmt"
	"io"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %w", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %w", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes  []byte
	info   os.FileInfo
	digest [sha256.Size]byte
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _SchemaDatabase000001_create_initial_tablesDownSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x72\x09\xf2\x0f\x50\x08\x71\x74\xf2\x71\x55\x48\x4c\x2f\xca\x2f\xc8\x2f\x2a\x89\xcf\x2f\x88\xcf\xcf\x8b\x4f\x49\xac\xb4\xe6\xc2\x26\x9d\x96\x99\x9a\x93\x82\x5d\xaa\xb4\x38\xb5\x08\xbb\x4c\x51\x6a\x7a\x66\x7e\x1e\x76\xb9\xfc\x82\xd4\xa2\xc4\x12\x90\x34\x20\x00\x00\xff\xff\xa6\xd9\x6b\x2b\x8e\x00\x00\x00")

func SchemaDatabase000001_create_initial_tablesDownSqlBytes() ([]byte, error) {
	return bindataRead(
		_SchemaDatabase000001_create_initial_tablesDownSql,
		"../../schema/database/000001_create_initial_tables.down.sql",
	)
}

func SchemaDatabase000001_create_initial_tablesDownSql() (*asset, error) {
	bytes, err := SchemaDatabase000001_create_initial_tablesDownSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "../../schema/database/000001_create_initial_tables.down.sql", size: 142, mode: os.FileMode(0644), modTime: time.Unix(1681327482, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x91, 0x99, 0x70, 0x33, 0x8b, 0xeb, 0x67, 0x8e, 0x60, 0x41, 0x9a, 0x2e, 0xe8, 0x12, 0x33, 0x6e, 0xe4, 0x7a, 0x25, 0xcc, 0xbd, 0x18, 0xdc, 0xcc, 0x65, 0x62, 0xea, 0xc0, 0x1b, 0x95, 0x18, 0xba}}
	return a, nil
}

var _SchemaDatabase000001_create_initial_tablesUpSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xc4\x94\x41\x4f\x83\x40\x10\x85\xef\xfc\x8a\x39\xb6\x49\xff\x81\xa7\xe9\x32\xc5\x8d\xb8\x98\x61\xd5\x70\x22\x24\x6c\x1b\x62\xcb\x12\xc4\x83\xff\xde\xb0\x54\x2a\x75\x4b\xd4\xa4\xf1\xca\x63\xe7\x7b\xfb\xde\x80\x60\x42\x4d\xa0\x71\x1d\x13\x14\xbb\xd6\x36\xb6\xed\xf2\xb7\x57\xd3\xc2\x22\x00\x00\xa8\x4a\x90\x4a\x53\x44\x0c\x0f\x2c\xef\x91\x33\xb8\xa3\x0c\x22\x52\xc4\xa8\x29\x04\x8c\x9f\x31\x4b\x01\x53\x90\x21\x29\x2d\x75\xb6\x72\x07\xeb\xe2\x60\xe0\x09\x59\xdc\x22\x83\x4a\x34\xa8\xc7\x38\x1e\x24\x73\x28\xaa\xfd\x37\x2d\x58\xde\x04\x81\xdf\x4f\x6b\x76\x95\xad\xaf\xe2\x68\x86\xba\xad\xcc\xbe\xbc\x62\x0c\xc3\xad\xf2\x2f\xa3\x4f\xba\x7b\x41\x24\x2a\xd5\x8c\x52\x69\xd8\xbe\xe4\xe7\x69\x6c\x12\x26\x19\x29\xe7\x63\x31\xce\x5a\x02\xd3\x86\x98\x94\xa0\xf4\x3c\xc0\x45\x2f\x27\x0a\x42\x8a\x49\x13\x08\x4c\x05\x86\x34\x93\x80\x6d\x4c\x5b\x74\xff\x10\xbd\x6d\x72\x5b\xe7\x65\xf1\x7e\x02\xaf\x65\xd4\x07\xf1\x53\xae\x3b\x66\x1b\x37\x23\xec\x09\xd3\xec\x6b\xdb\x8d\x86\x86\x27\xae\x6d\x7f\x19\xc7\x51\x17\xb5\xfe\x73\xf9\x7d\x8d\xc3\x7a\x4d\x5a\xfc\xf4\xe0\x2f\xd1\xa9\xfe\x0e\x57\x73\x20\xdb\x4c\x29\xee\x2a\x7e\xc4\x58\xf8\x1f\x30\xee\xa7\x31\x01\x1d\x73\xf1\xa3\x7a\xf1\xf2\x42\x7e\x04\x00\x00\xff\xff\xb0\x2a\x33\x47\x98\x04\x00\x00")

func SchemaDatabase000001_create_initial_tablesUpSqlBytes() ([]byte, error) {
	return bindataRead(
		_SchemaDatabase000001_create_initial_tablesUpSql,
		"../../schema/database/000001_create_initial_tables.up.sql",
	)
}

func SchemaDatabase000001_create_initial_tablesUpSql() (*asset, error) {
	bytes, err := SchemaDatabase000001_create_initial_tablesUpSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "../../schema/database/000001_create_initial_tables.up.sql", size: 1176, mode: os.FileMode(0644), modTime: time.Unix(1681327541, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xf9, 0xc0, 0x56, 0x84, 0xe9, 0x8a, 0xa4, 0xbc, 0xde, 0xc6, 0x52, 0xa5, 0x27, 0x70, 0x14, 0x65, 0x5d, 0xb5, 0xb2, 0x32, 0x77, 0x59, 0x7c, 0x5, 0x19, 0xe7, 0xb4, 0x55, 0x17, 0x82, 0x29, 0xec}}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetString returns the asset contents as a string (instead of a []byte).
func AssetString(name string) (string, error) {
	data, err := Asset(name)
	return string(data), err
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// MustAssetString is like AssetString but panics when Asset would return an
// error. It simplifies safe initialization of global variables.
func MustAssetString(name string) string {
	return string(MustAsset(name))
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetDigest returns the digest of the file with the given name. It returns an
// error if the asset could not be found or the digest could not be loaded.
func AssetDigest(name string) ([sha256.Size]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s can't read by error: %v", name, err)
		}
		return a.digest, nil
	}
	return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s not found", name)
}

// Digests returns a map of all known files and their checksums.
func Digests() (map[string][sha256.Size]byte, error) {
	mp := make(map[string][sha256.Size]byte, len(_bindata))
	for name := range _bindata {
		a, err := _bindata[name]()
		if err != nil {
			return nil, err
		}
		mp[name] = a.digest
	}
	return mp, nil
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"../../schema/database/000001_create_initial_tables.down.sql": SchemaDatabase000001_create_initial_tablesDownSql,
	"../../schema/database/000001_create_initial_tables.up.sql":   SchemaDatabase000001_create_initial_tablesUpSql,
}

// AssetDebug is true if the assets were built with the debug flag enabled.
const AssetDebug = false

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//
//	data/
//	  foo.txt
//	  img/
//	    a.png
//	    b.png
//
// then AssetDir("data") would return []string{"foo.txt", "img"},
// AssetDir("data/img") would return []string{"a.png", "b.png"},
// AssetDir("foo.txt") and AssetDir("notexist") would return an error, and
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		canonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(canonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"..": {nil, map[string]*bintree{
		"..": {nil, map[string]*bintree{
			"schema": {nil, map[string]*bintree{
				"database": {nil, map[string]*bintree{
					"000001_create_initial_tables.down.sql": {SchemaDatabase000001_create_initial_tablesDownSql, map[string]*bintree{}},
					"000001_create_initial_tables.up.sql":   {SchemaDatabase000001_create_initial_tablesUpSql, map[string]*bintree{}},
				}},
			}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory.
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = os.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	return os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
}

// RestoreAssets restores an asset under the given directory recursively.
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(canonicalName, "/")...)...)
}
